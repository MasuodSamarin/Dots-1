
# 2018-05-13 19:00:18.371358
+a = [1, 3, 4, 56, 67, 7, 78]

# 2018-05-13 19:00:22.117798
+sorted(a)

# 2018-05-13 19:25:40.010428
+round

# 2018-05-13 19:26:05.275982
+round(1.43546546546546756756)

# 2018-05-13 19:26:11.467771
+round(1.43546546546546756756, 1)

# 2018-05-13 19:26:16.203687
+round(1.43546546546546756756)

# 2018-05-13 19:26:20.047764
+round(1.63546546546546756756)

# 2018-05-13 21:38:54.391985
+def adjacentElementsProduct(arr):
+    list = [ arr[x] * arr[x+1] for x in range(len(arr)-2)]
+    return max(list)

# 2018-05-13 21:39:08.327811
+arr = [3, 6, -2, -5, 7, 3]

# 2018-05-13 21:39:16.399032
+adjacentElementsProduct(arR)

# 2018-05-13 21:39:18.873795
+adjacentElementsProduct(arr)

# 2018-05-13 21:39:29.520684
+def adjacentElementsProduct(arr):
+    list = [ arr[x] * arr[x+1] for x in range(len(arr)-2)]
+    print(list)

# 2018-05-13 21:39:33.908746
+adjacentElementsProduct(arr)

# 2018-05-13 21:39:49.447034
+arr

# 2018-05-13 21:41:02.336869
+for x in range(len(arr)):
+    print(arr[x] * arr[x+1])

# 2018-05-13 21:41:11.294470
+for x in range(len(arr)-1):
+    print(arr[x] * arr[x+1])

# 2018-05-13 22:00:37.599129
+def shapeArea(n):
+    if n == 1:
+        return 1
+    else:
+        return shapeArea(n-1) + 4 * (n - 1)

# 2018-05-13 22:00:42.418874
+shapeArea(100)

# 2018-05-13 22:00:45.789483
+shapeArea(5)

# 2018-05-13 22:00:48.207534
+shapeArea(6)

# 2018-05-13 22:00:54.615881
+shapeArea(10 ** 4)

# 2018-05-13 23:29:47.670379
+try:
+    x = int(input('Enter a number: '))
+except (ZeroDivisionError, TypeError, ValueError) as e:
+    print(e)
+else:
+    print('No Exception Raised')
+finally:
+    print('I am finally being executed')

# 2018-05-14 00:04:54.774110
+def func(*a):
+    return sum(a)

# 2018-05-14 00:05:02.969425
+func(12, 14, 5)

# 2018-05-14 00:05:10.732153
+def func(**a):
+    return sum(a)

# 2018-05-14 00:05:12.436514
+func(12, 14, 5)

# 2018-05-14 11:15:00.674829
+a = 'abc'

# 2018-05-14 11:15:41.537826
+a.capitalize()

# 2018-05-14 11:16:18.338099
+'bcd sdfdsf'.capitalize()

# 2018-05-14 11:17:53.415824
+a.islower()

# 2018-05-14 11:17:58.236540
+a.isupper()

# 2018-05-14 11:18:20.219778
+a.join('bcd')

# 2018-05-14 11:18:25.095722
+a

# 2018-05-14 11:18:45.871541
+a.count()

# 2018-05-14 11:18:49.362132
+a.count('a')

# 2018-05-14 11:18:52.046973
+a.count('d')

# 2018-05-14 11:19:46.278897
+a.lower()

# 2018-05-14 11:20:20.622961
+'ABC'.lower()

# 2018-05-14 11:20:33.853683
+'ABC'.upper()

# 2018-05-14 11:21:37.533331
+a.endswith('c')

# 2018-05-14 11:22:24.505629
+a.find('v')

# 2018-05-14 11:22:27.232493
+a.find('c')

# 2018-05-14 11:23:08.601192
+a.rfind('v')

# 2018-05-14 11:23:10.961103
+a.rfind('c')

# 2018-05-14 11:23:17.210137
+a

# 2018-05-14 11:24:27.336711
+a.index('c')

# 2018-05-14 11:24:29.584829
+a.index('v')

# 2018-05-14 11:25:25.341820
+a.encode()

# 2018-05-14 11:25:50.837574
+a.swapcase()

# 2018-05-14 11:26:30.613971
+a.title()

# 2018-05-14 11:26:37.630460
+'abc def'.title()

# 2018-05-14 11:27:16.515290
+a.strip()

# 2018-05-14 11:27:39.082040
+a.strip('a')

# 2018-05-14 11:27:42.245228
+ls

# 2018-05-14 11:27:56.803592
+'     def'.strip()

# 2018-05-14 11:30:11.932674
+a.ljust(10)

# 2018-05-14 11:30:24.721433
+a.ljust(10, '*')

# 2018-05-14 11:31:35.382214
+'10'.isdecimal()

# 2018-05-14 11:31:50.538257
+'0b10'.isdecimal()

# 2018-05-14 11:32:07.809552
+'0b10'.isdigit()

# 2018-05-14 11:32:24.710510
+'0b10'.isidentifier()

# 2018-05-14 11:37:13.560459
+import os

# 2018-05-14 11:37:28.622582
+os.system('cd dwn')

# 2018-05-14 11:38:49.395098
+int('abc')

# 2018-05-14 11:41:50.981632
+if 3>5: assert 'Hello'

# 2018-05-14 11:41:56.464895
+if 3>1: assert 'Hello'

# 2018-05-14 11:43:01.778834
+assert 3>5, 'Hello'

# 2018-05-14 11:43:09.617521
+assert 3>1, 'Hello'

# 2018-05-14 11:45:37.951503
+ls

# 2018-05-14 11:46:06.010890
+add = lambda x, y: x+y

# 2018-05-14 11:46:11.530881
+add(4, 3)

# 2018-05-14 11:46:13.889115
+add(4, 3, 6)

# 2018-05-14 11:46:27.058815
+add = lambda *x : sum(x)

# 2018-05-14 11:46:28.924196
+add(4, 3, 6)

# 2018-05-14 11:46:31.804010
+add(4, 3, 6, 1)

# 2018-05-14 12:01:22.273032
+from abc import ABC, abstractmethod

# 2018-05-14 12:01:42.737161
+class Abstract(ABC):
+    def method(self):
+        pass

# 2018-05-14 12:02:03.671614
+class Derived(Abstract):
+    pass

# 2018-05-14 12:02:15.947693
+a = Derived()

# 2018-05-14 12:02:20.673510
+a

# 2018-05-14 12:02:59.780921
+class Abstract(ABC):
+    @abstractmethod
+    def method(self):
+        pass

# 2018-05-14 12:03:03.707787
+class Derived(Abstract):
+    pass

# 2018-05-14 12:03:06.643841
+a = Derived()

# 2018-05-14 12:04:07.803470
+class Derived(Abstract):
+    def method(self):
+        print('Hello')

# 2018-05-14 12:04:10.248220
+a = Derived()

# 2018-05-14 12:04:15.107393
+a.method()

# 2018-05-20 09:32:44.815808
+string = 'phenomenal'

# 2018-05-20 09:32:56.380803
+min(string)

# 2018-05-20 09:34:19.546745
+min('Phenomenal')

# 2018-05-20 09:36:42.664239
+min('Phenomenal123')

# 2018-05-20 09:36:49.685194
+max('Phenomenal123')

# 2018-05-20 09:52:37.870472
+bin(0o20)

# 2018-05-20 09:52:41.665022
+bin(0o10)

# 2018-05-20 09:52:54.420021
+bin(0o7)

# 2018-05-20 09:53:30.382097
+bin(0o111)

# 2018-05-20 09:54:05.715022
+bin(0o10)

# 2018-05-20 09:54:55.126381
+bin(2)

# 2018-05-20 09:55:06.806518
+bin(0)

# 2018-05-20 09:56:03.446484
+bin(0o10)

# 2018-05-20 09:56:30.726087
+bin(0o70)

# 2018-05-20 10:16:26.246109
+import math

# 2018-05-20 10:16:35.118631
+math.sqrt(3) / 2

# 2018-06-02 19:55:06.906185
+a = 'gsadasfdashdasdkjgadhjdyjhasfdasgd' 

# 2018-06-02 19:55:18.951693
+b = 'ajdfaghfsdasgdfagsdhgasdfasfdahd'

# 2018-06-02 19:56:12.734589
+for item in a:
+    if item in b:
+        pass
+    else:
+        print('H')

# 2018-06-02 19:56:27.227727
+for item in b:
+    if item in a:
+        pass
+    else:
+        print('H')

# 2018-06-02 19:57:59.734045
+a = 'gsadasfdashdasdkjgadhjdyjhasfdasgd'

# 2018-06-02 19:58:09.887169
+b = 'ajdfaghfsdasgdfagsdhgasdfasfdahd'

# 2018-06-02 19:58:17.622047
+for item in b:
+    if item in a:
+        pass
+    else:
+        print('H')

# 2018-06-02 20:23:29.354770
+a - 'gsadasfdashdasdkjgadhjdyjhasfdasgd' 

# 2018-06-02 20:23:34.779032
+a = 'gsadasfdashdasdkjgadhjdyjhasfdasgd'

# 2018-06-02 20:23:39.882905
+b = 'ajdfaghfsdasgdfagsdhgasdfasfdahd'

# 2018-06-02 20:23:49.107345
+set(a)

# 2018-06-02 20:24:50.614429
+set (b)

# 2018-06-02 20:25:56.301031
+set(a).intersection(set(b))

# 2018-06-02 20:26:33.324820
+len(a)

# 2018-06-02 20:26:39.211683
+len(b)

# 2018-06-02 20:32:49.841234
+list(a)

# 2018-06-02 20:32:58.411279
+list(a) - list(b)

# 2018-06-02 20:33:12.339397
+count = 0

# 2018-06-02 20:33:39.808645
+for item in list(a):
+    if item in list(b):
+        count += 1

# 2018-06-02 20:33:41.466991
+count

# 2018-06-02 20:34:27.833482
+for item in list(set(a)):
+    if item in list(set(b)):
+        count += 1

# 2018-06-02 20:34:31.192786
+count - 32

# 2018-06-03 01:07:57.531532
+a = '123456'

# 2018-06-03 01:15:44.529255
+a.find((1, 23, 4))

# 2018-06-03 01:16:08.210643
+a.find(map(str, a))

# 2018-06-03 01:35:35.014194
+a = {1: 1, 2: 3}

# 2018-06-03 01:35:40.486471
+a.pop(1)

# 2018-06-03 01:35:42.868681
+a.pop(2)

# 2018-06-03 10:43:42.931043
+a = [1]

# 2018-06-03 10:43:47.216098
+a + [2]

# 2018-06-03 10:46:36.275432
+a = [1, 2]

# 2018-06-03 10:46:41.929534
+b = [4, 5]

# 2018-06-03 10:46:48.632394
+c = [a +b]

# 2018-06-03 10:46:49.625803
+c

# 2018-06-03 10:46:55.496478
+c =a + b

# 2018-06-03 10:46:56.824803
+c

# 2018-06-03 10:47:15.333303
+a

# 2018-06-03 10:47:18.504152
+c = []

# 2018-06-03 10:47:24.226128
+c.append(a)

# 2018-06-03 10:47:25.618883
+c

# 2018-06-03 10:47:29.978515
+c.append(b)

# 2018-06-03 10:47:30.982056
+c

# 2018-06-03 11:19:38.088573
+list = [1, 2, 3]

# 2018-06-03 11:19:44.727481
+list = [1, 2, 3, 5, 4]

# 2018-06-03 11:20:42.126976
+def change(list):
+    list[0] = 'x'

# 2018-06-03 11:20:48.508793
+change(list)

# 2018-06-03 11:20:49.732359
+list

# 2018-06-03 20:43:57.757814
+a = 120.0000005

# 2018-06-03 20:44:26.289245
+'{:.2f}'.format(a)

# 2018-06-03 20:44:35.062240
+a = '{:.2f}'.format(a)

# 2018-06-03 20:44:35.926118
+a

# 2018-06-03 20:44:46.653027
+type(a)

# 2018-06-03 20:44:53.836364
+a = int(a)

# 2018-06-03 20:44:59.689542
+a = float(a)

# 2018-06-03 20:45:00.469491
+a

# 2018-06-03 20:45:21.064214
+a = float('{:.2f}'.format(a))

# 2018-06-03 20:45:22.692396
+a

# 2018-06-19 22:31:02.092130
+import requests

# 2018-06-19 22:31:09.514403
+from bs4 import BeautifulSoup

# 2018-06-19 22:32:54.225033
+url = 'http://thefappening.pro/carla-howe/carla-howe-nude-for-fifa-word-cup-2018-30-photos/'

# 2018-06-19 22:33:04.854359
+response = requests.get(url)

# 2018-06-19 22:33:18.879586
+soup = BeautifulSoup(response.content, 'html.parser')

# 2018-06-19 22:33:25.529213
+soup.find_all('a')

# 2018-06-19 22:33:31.729614
+links = []

# 2018-06-19 22:34:05.376895
+for element in soup.find_all('a'):
+    links.append(element.get('href'))

# 2018-06-19 22:34:07.681363
+links

# 2018-06-19 22:34:21.031305
+dlink = []

# 2018-06-19 22:34:44.913829
+for link in links:
+    if link.endswith('jpg'):
+        dlink.append(link)

# 2018-06-19 22:34:47.033181
+dlink

# 2018-06-19 22:40:36.561729
+'http://thefappening.pro/wp-content/uploads/2018/06/Carla-Howe-Nude-The-Fappening-pro-11.jpg' in links

# 2018-06-19 22:42:32.659443
+url = 'http://thefappening.pro/carla-howe/carla-howe-nude-for-fifa-word-cup-2018-30-photos/'

# 2018-06-19 22:43:02.535842
+response = requests.get(url)

# 2018-06-21 21:08:23.625749
+import requests

# 2018-06-21 21:08:25.176121
+from bs4 import BeautifulSoup

# 2018-06-21 21:08:32.522301
+url = 'http://213.32.113.82/music/Enrique%20Iglesias%20-%20Sex%20And%20Love%20%282014%29%20%28by%20emi%29/'

# 2018-06-21 21:08:36.162058
+response = requests.get(url)

# 2018-06-21 21:08:45.851495
+soup = BeautifulSoup(response.content, 'html.parser')

# 2018-06-21 21:08:51.847313
+soup.find_all('a')

# 2018-06-21 21:09:25.431849
+links = []

# 2018-06-21 21:10:07.136545
+for element in soup.find_all('a'):
+    link = element.get('href')
+    if link is not None:
+        links.append(link)

# 2018-06-21 21:10:10.337481
+links

# 2018-07-17 18:15:56.290404
+import requests

# 2018-07-17 18:15:58.049586
+from bs4 import BeautifulSoup

# 2018-07-17 18:16:23.202028
+url = "https://www.pcloud.com/"

# 2018-07-17 18:16:29.562413
+response = requests.get(url)

# 2018-07-17 18:16:41.323739
+soup = BeautifulSoup(response.content, 'html.parser')

# 2018-07-17 18:16:52.942176
+soup.find_all('a')

# 2018-07-17 18:19:41.328961
+soup.find_all('form')

# 2018-07-17 18:32:37.283301
+url = '    https://api.pcloud.com/userinfo '

# 2018-07-17 18:32:47.297413
+url = 'https://api.pcloud.com/userinfo'

# 2018-07-17 18:32:55.460511
+response = requests.get(url)

# 2018-07-17 18:32:58.343751
+response

# 2018-07-17 18:33:05.336863
+soup = BeautifulSoup(response.content, 'html.parser')

# 2018-07-17 18:33:10.720290
+soup.find_all('form')

# 2018-07-17 18:33:18.406493
+soup.find_all('post')

# 2018-07-17 18:33:28.507657
+soup.prettify()

# 2018-07-17 18:33:29.919837
+soup.prettify

# 2018-07-17 18:33:41.502569
+response.status_code

# 2018-07-17 18:33:45.990547
+response.content

# 2018-07-17 18:33:53.207273
+response.content()

# 2018-07-17 18:34:07.484446
+soup.prettify

# 2018-07-17 18:37:29.823980
+url = 'https://api.pcloud.com/userinfo?username="musicman"&password="3loves94"'

# 2018-07-17 18:37:56.093222
+response = requests.get(url)

# 2018-07-17 18:38:06.600404
+response.status_code

# 2018-07-17 18:38:15.705523
+soup = BeautifulSoup(response.content, 'html.parser')

# 2018-07-17 18:38:25.988754
+soup.prettify

# 2018-07-17 18:38:39.904016
+url = 'https://api.pcloud.com/userinfo?username="musicman@bitwhites.top"&password="3loves94"'

# 2018-07-17 18:38:43.887413
+response.status_code

# 2018-07-17 18:38:50.121087
+response = requests.get(url)

# 2018-07-17 18:38:51.709912
+response

# 2018-07-17 18:38:54.743624
+response.connection

# 2018-07-17 18:38:57.528524
+response.connect

# 2018-07-17 18:39:01.390067
+response.content

# 2018-07-17 18:39:32.872846
+url = 'https://api.pcloud.com/userinfo?username="hacker@dumoac.net"&password="3loves94"'

# 2018-07-17 18:39:40.498025
+response = requests.get(url)

# 2018-07-17 18:39:46.809474
+response.text

# 2018-07-17 18:41:22.216464
+pcloud_api = "https://api.pcloud.com/userinfo"

# 2018-07-17 18:41:43.608003
+response = requests.get(pcloud_api)

# 2018-07-17 18:41:46.984797
+response.text

# 2018-07-17 18:41:51.278361
+response.content

# 2018-07-17 18:44:44.631208
+url = 'https://api.pcloud.com/userinfo?email="hacker@dumoac.net"&password="3loves94"'

# 2018-07-17 18:44:59.330574
+response = requests.get(url)

# 2018-07-17 18:45:01.582488
+response.content

# 2018-07-17 18:45:16.199765
+url = 'https://api.pcloud.com/userinfo?email="hacker@dumoac.net"&password="3loves94"'

# 2018-07-17 18:45:56.561304
+url = 'https://api.pcloud.com/userinfo?email=hacker@dumoac.net&password=3loves94'

# 2018-07-17 18:46:03.899143
+response = requests.get(url)

# 2018-07-17 18:46:07.882940
+response.conte

# 2018-07-17 18:46:09.481152
+response.content

# 2018-07-17 18:46:12.853868
+url

# 2018-07-17 18:46:30.424242
+url = 'https://api.pcloud.com/userinfo?username=hacker@dumoac.net&password=3loves94'

# 2018-07-17 18:46:35.908144
+response = requests.get(url)

# 2018-07-17 18:46:40.476673
+response.content

# 2018-07-17 18:46:44.977182
+soup = BeautifulSoup(response.content, 'html.parser')

# 2018-07-17 18:46:47.689879
+soup.prettify

# 2018-07-17 18:47:51.309768
+soup.content

# 2018-07-17 18:47:53.035163
+soupt

# 2018-07-17 18:47:54.436442
+soup

# 2018-07-17 18:48:09.538383
+soup.contents

# 2018-07-17 18:48:18.390715
+soup.attrs

# 2018-07-17 18:48:24.649782
+soup.children

# 2018-07-17 18:48:57.543105
+soup.is_xml

# 2018-07-17 18:49:06.209643
+type(soup)

# 2018-07-17 18:49:09.728518
+response.content

# 2018-07-17 18:49:17.072015
+response.headers

# 2018-07-17 18:49:37.456922
+response

# 2018-07-17 18:50:12.619491
+soup

# 2018-07-17 18:50:28.112839
+soup["email"]

# 2018-07-17 18:50:50.851496
+soup["plan"]

# 2018-07-17 18:51:13.353755
+dic = dict(soup)

# 2018-07-17 18:51:26.765682
+dic = dict(response.content)

# 2018-07-17 18:51:33.754766
+response.content

# 2018-07-17 18:51:38.632596
+soup.prettift

# 2018-07-17 18:51:40.373278
+soup.prettify

# 2018-07-17 18:51:56.928036
+soup.prettify.__class__

# 2018-07-17 18:52:11.213770
+soup.prettify.__dir__

# 2018-07-17 18:52:26.789828
+response.connection

# 2018-07-17 18:52:32.384101
+response.cookies

# 2018-07-17 18:52:42.280375
+response.json

# 2018-07-17 18:52:47.778497
+response.text

# 2018-07-17 18:53:00.683666
+dic = dict(response.text)

# 2018-07-17 18:53:20.530752
+response.text

# 2018-07-17 18:53:39.581472
+response.content

# 2018-07-17 18:53:44.492370
+soup

# 2018-07-17 18:53:53.331649
+string = soup

# 2018-07-17 18:53:55.923767
+string

# 2018-07-17 18:54:05.042287
+string["email"]

# 2018-07-17 18:54:23.458179
+type(string)

# 2018-07-17 18:54:31.880577
+string = str(soup)

# 2018-07-17 18:54:33.186445
+string

# 2018-07-17 18:55:07.608199
+type(response.content)

# 2018-07-17 18:55:11.945944
+type(response.text)

# 2018-07-17 18:55:22.402476
+response.text

# 2018-07-17 18:56:15.975300
+import os

# 2018-07-17 18:56:46.869127
+import subprocess

# 2018-07-17 18:57:04.536413
+sub = subprocess.call("ls")

# 2018-07-17 18:57:09.075277
+sub

# 2018-07-17 18:57:26.280463
+subproccess.call("ls ram")

# 2018-07-17 18:57:32.513826
+sub = subprocess.call("ls rab")

# 2018-07-17 18:57:52.489650
+sub = subprocess.check_output

# 2018-07-17 18:58:00.414620
+sub = subprocess.check_output("ls")

# 2018-07-17 18:58:01.617862
+sub

# 2018-07-17 18:59:15.208909
+sub = subprocess.check_output("read -s B && echo $B")

# 2018-07-17 18:59:42.418593
+sub = subprocess.check_output(ls)

# 2018-07-17 18:59:59.854795
+sub = subprocess.check_output("echo Hello")

# 2018-07-17 19:00:10.080584
+sub = subprocess.check_output("echo")

# 2018-07-17 19:00:11.626433
+sub

# 2018-07-17 19:00:15.807719
+sub = subprocess.check_output("echo Hello")

# 2018-07-17 19:00:31.591539
+sub = subprocess.builtins

# 2018-07-17 19:00:34.302746
+sub = subprocess.builtins()

# 2018-07-17 19:01:11.677850
+sub = subprocess.check_output("echo", "Hello")

# 2018-07-17 19:01:19.536030
+sub = subprocess.check_output("echo" "Hello")

# 2018-07-17 19:01:23.633091
+sub = subprocess.check_output("echo" " Hello")

# 2018-07-17 19:02:00.733867
+sub = subprocess.check_output(["echo", "Hello"])

# 2018-07-17 19:02:02.930146
+sub

# 2018-07-17 19:02:36.721845
+sub = subprocess.check_output(["A=123", "echo", "$A"])

# 2018-07-17 19:02:51.120824
+sub = subprocess.check_output(["A","=", "123", "echo", "$A"])

# 2018-07-17 19:03:04.342215
+sub = subprocess.check_output(["declare A","=", "123", "echo", "$A"])

# 2018-07-17 19:03:10.915871
+sub = subprocess.check_output(["declare", "A","=", "123", "echo", "$A"])

# 2018-07-17 19:03:51.489386
+sub = subprocess.getoutput("A=123 && echo $A")

# 2018-07-17 19:03:54.113690
+sub

# 2018-07-17 19:04:11.615291
+sub = subprocess.getoutput("read -s A && echo $A")

# 2018-07-17 19:04:12.946339
+sub

# 2018-07-17 19:04:51.817981
+sub = subprocess.getoutput("read -n 'Enter your password: ' -s A && echo $A")

# 2018-07-17 19:05:37.932718
+sub = subprocess.getoutput("read -r 'Enter your password: ' -s A && echo $A")

# 2018-07-17 19:05:39.593587
+sub

# 2018-07-17 19:05:53.767528
+sub = subprocess.getoutput("read -p 'Enter your password: ' -s A && echo $A")

# 2018-07-17 19:05:55.303158
+sub

# 2018-07-17 19:06:03.803703
+ls

# 2018-07-17 19:10:23.609934
+sub = subprocess.run

# 2018-07-17 19:19:23.816645
+sub = subprocess.check_output(["read", "-p", "'Password'"])

# 2018-07-17 19:19:27.380432
+ls

# 2018-07-17 19:22:50.119079
+sub = subprocess.call("ls")

# 2018-07-17 19:24:01.608670
+subprocess.Popen("ls")

# 2018-07-17 19:24:47.447846
+subprocess.Popen("ls", shell=True)

# 2018-07-17 19:25:21.854999
+a = subprocess.Popen("ls", shell=True)

# 2018-07-17 19:25:24.586841
+sub

# 2018-07-17 19:25:25.771506
+a

# 2018-07-17 19:26:00.491799
+a = subprocess.Popen("ls", stdout-True)

# 2018-07-17 19:26:07.737389
+a = subprocess.Popen("ls", stdout=True)

# 2018-07-17 19:26:09.460766
+a

# 2018-07-17 19:36:41.324152
+url

# 2018-07-17 19:36:58.306838
+json.load(response.content)

# 2018-07-17 19:37:01.621655
+import json

# 2018-07-17 19:37:03.402329
+json.load(response.content)

# 2018-07-17 19:37:12.227773
+json.load(response.text)

# 2018-07-17 19:37:37.278588
+json.loads(response.text)

# 2018-07-17 19:37:49.467631
+json.loads(response.text)["email"]

# 2018-07-17 19:40:04.051287
+response.json()

# 2018-07-17 19:40:13.756605
+response.json

# 2018-07-17 19:40:15.454806
+response.json()

# 2018-07-17 19:40:22.275364
+response.json()["email"]

# 2018-07-17 19:40:34.436336
+response.json()["usedquota"]

# 2018-07-17 19:40:39.331336
+response.json()["usedquota"] / 1024

# 2018-07-17 19:40:43.746056
+response.json()["usedquota"] / 1024 /1024

# 2018-07-17 19:40:54.893326
+response.json()["usedquota"] / 1024 / 1024 / 1024

# 2018-07-17 19:41:32.625850
+url = "https://api.pcloud.com/userinfo"

# 2018-07-17 19:41:41.341441
+response = requests.get(url)

# 2018-07-17 19:41:44.163714
+response.json()

# 2018-07-17 19:41:50.163577
+response.content

# 2018-07-17 19:41:55.640455
+response.headers

# 2018-07-17 19:43:13.218133
+response = requests.get(url, auht={'username': "hacker@dumoac.net", "password": "3loves94"})

# 2018-07-17 19:43:20.232550
+response = requests.get(url, auth={'username': "hacker@dumoac.net", "password": "3loves94"})

# 2018-07-17 19:43:34.345084
+response = requests.get(url, auth=({'username': "hacker@dumoac.net", "password": "3loves94"}))

# 2018-07-17 19:43:35.845010
+ls

# 2018-07-17 19:47:49.996411
+url

# 2018-07-17 19:48:42.550301
+r = requests.post(url, {'username': 'hacker@dumoac.net', 'password': "3loves94"})

# 2018-07-17 19:48:45.236275
+r

# 2018-07-17 19:48:48.381221
+r.content

# 2018-07-17 19:48:55.751283
+r.json()

# 2018-07-17 19:49:06.700996
+url

# 2018-07-17 20:06:08.358220
+r = requests.post(url, {'username': 'hacker@dumoac.net', 'password': ""})

# 2018-07-17 20:06:11.998436
+r.json()

# 2018-07-17 21:36:44.571146
+r = requests.post(url, {'username': 'hacker@dumoac.net', 'password': "3loves94"})

# 2018-07-17 21:36:53.262202
+r.json()

# 2018-07-17 22:27:41.033644
+d1 = {1: '1'}

# 2018-07-17 22:27:50.606840
+d2 = d1 + {2: '2'}

# 2018-07-17 22:28:13.186389
+d2 = d1.items()

# 2018-07-17 22:28:14.818243
+d2

# 2018-07-17 22:28:29.467757
+d2 = d1.get()

# 2018-07-17 22:29:02.395777
+d2 = d1.update({2: '2'})

# 2018-07-17 22:29:03.635452
+d2

# 2018-07-17 22:29:09.119927
+d1

# 2018-07-17 22:29:52.886000
+d1.valuesvalues

# 2018-07-17 22:29:54.714204
+d1.values

# 2018-07-17 22:29:56.332237
+d1.values()

# 2018-07-17 22:30:51.660634
+{}.update(d1)

# 2018-07-17 23:08:15.491743
+a = '1'

# 2018-07-17 23:08:50.558567
+type(a)

# 2018-07-17 23:08:55.606141
+type(a) == 'str'

# 2018-07-17 23:09:03.280013
+type(a) == type('str')

# 2018-07-18 05:12:57.357687
+import pyperclip

# 2018-07-18 05:13:15.181963
+pyperclip.copy("Hello")

# 2018-07-18 05:25:11.549774
+ls

# 2018-07-18 09:55:02.750426
+response = requests.get(url, auht={'username': "hacker@dumoac.net", "password": "3loves94"})

# 2018-07-18 09:55:19.369450
+url = "https://api.pcloud.com/userinfo"

# 2018-07-18 09:55:42.665150
+response = requests.post(url, {'username': "hacker@dumoac.net", "password": "3loves94"})

# 2018-07-18 09:56:05.677987
+data = {'username': "hacker@dumoac.net", "password": "3loves94"}

# 2018-07-18 09:56:25.177756
+response = requests.post(url, data)

# 2018-07-18 09:56:45.088607
+json_data = response.json()

# 2018-07-18 09:56:51.686232
+json_data

# 2018-07-18 09:57:34.211159
+down_url = "https://api.pcloud.com/getfilelink"

# 2018-07-18 09:57:47.778023
+response = requests.post(down_url, data)

# 2018-07-18 09:57:55.261982
+json_data = response.json()

# 2018-07-18 09:58:03.213029
+json_data

# 2018-07-18 09:59:30.756575
+down_data = {'fileid': 6692470617}

# 2018-07-18 09:59:40.069707
+down_data.update(data)

# 2018-07-18 09:59:45.566335
+response = requests.post(down_url, data)

# 2018-07-18 09:59:52.509143
+response = requests.post(down_url, down_data)

# 2018-07-18 09:59:59.299483
+json_data = response.json()

# 2018-07-18 10:00:04.796817
+json_data

# 2018-07-18 11:55:30.619939
+ls

# 2018-07-18 11:55:49.734662
+url = "https://webdav.pcloud.com/"

# 2018-07-18 11:56:02.142168
+response = requests.get(down_url)

# 2018-07-18 11:56:03.591844
+response

# 2018-07-18 11:56:07.112488
+response.content

# 2018-07-18 11:56:14.927675
+response = requests.get(url)

# 2018-07-18 11:56:16.567740
+response

# 2018-07-18 11:56:18.935905
+response.connection

# 2018-07-18 11:56:21.575945
+response.content

# 2018-07-18 11:56:57.960124
+ls

# 2018-07-18 11:57:17.995494
+response = requests.post(url, data)

# 2018-07-18 11:57:19.313230
+response

# 2018-07-18 11:57:24.258528
+data

# 2018-07-18 11:57:31.400843
+response.contenr

# 2018-07-18 11:57:33.523464
+response.content

# 2018-07-18 11:57:48.476230
+json_data = response.json()

# 2018-07-18 11:58:03.747431
+soup = BeautifulSoup(response.content, 'html.parser')

# 2018-07-18 11:58:10.457928
+soup.prettify

# 2018-07-19 00:44:59.665057
+ls

# 2018-07-19 00:45:11.650577
+import requests

# 2018-07-19 00:45:26.824280
+url = "https://download3.vmware.com/software/wkst/file/VMware-Workstation-Full-14.1.2-8497320.x86_64.bundle?HashKey=327eba91fac4aab24213002e8a4666d8&params=%7B%22custnumber%22%3A%22anBwQGh3ZGplZQ%3D%3D%22%2C%22sourcefilesize%22%3A%22439.74+MB%22%2C%22dlgcode%22%3A%22WKST-1412-LX%22%2C%22languagecode%22%3A%22en%22%2C%22source%22%3A%22DOWNLOADS%22%2C%22downloadtype%22%3A%22manual%22%2C%22eula%22%3A%22Y%22%2C%22downloaduuid%22%3A%22800e313d-357c-4916-a81d-f69f59e73e6a%22%2C%22purchased%22%3A%22N%22%2C%22dlgtype%22%3A%22Product+Binaries%22%2C%22productversion%22%3A%2214.1.2%22%2C%22productfamily%22%3A%22VMware+Workstation+Pro%22%7D&AuthKey=1531939979_72497160806c0356eaaf2492943ca229"

# 2018-07-19 00:45:40.858952
+response = requests.get(url)

# 2018-07-19 00:45:48.814791
+response = requests.get(url, stream=True)

# 2018-07-19 00:45:52.968657
+response.headers

# 2018-07-19 00:46:43.908146
+response.headers.json()

# 2018-07-19 00:46:47.263318
+import json

# 2018-07-19 00:46:53.411769
+response.json()

# 2018-07-19 00:46:57.239699
+response

# 2018-07-19 00:47:01.382900
+response.content

# 2018-07-19 00:47:04.492336
+ls

# 2018-07-19 00:47:08.635338
+response.headers

# 2018-07-19 00:49:12.332407
+response.headers["Content-Type"]

# 2018-07-19 06:50:27.981740
+a = 'http://cdn.p30download.com/?b=p30dl-tutorial&f=Lynda.Android.App.Development.Accessibility_p30download.com.rar' 

# 2018-07-19 06:50:38.552477
+b = a.split('/')

# 2018-07-19 06:50:40.391074
+b

# 2018-07-19 06:50:43.907297
+b = a.split('/')[-1]

# 2018-07-19 06:50:45.192645
+b

# 2018-07-19 06:50:58.640273
+b = a.split('/')[-1].split('?')[-1]

# 2018-07-19 06:50:59.902054
+b

# 2018-07-19 06:51:11.704133
+b = a.split('/')[-1].split('?')[-1].split('=')[-1]

# 2018-07-19 06:51:12.918534
+b

# 2018-07-19 19:23:54.556798
+import requests

# 2018-07-19 19:24:16.394361
+r = requests.get('cdn.p30download.com/?b=p30dl-tutorial&f=Linux.Academy.LPIC2.Linux.Engineer.Exam.201_p30download.com.part1.rar', stream=True)

# 2018-07-19 19:25:28.422184
+r = requests.get('http://cdn.p30download.com/?b=p30dl-tutorial&f=Linux.Academy.LPIC2.Linux.Engineer.Exam.201_p30download.com.part1.rar', stream=True)

# 2018-07-19 19:25:30.775458
+ls

# 2018-07-19 22:29:54.260661
+url = 'http://dammit.com.br/wp-content/uploads/2015/10/13-Nobody.mp3'

# 2018-07-19 22:30:01.657447
+import requests

# 2018-07-19 22:31:15.099771
+response = requests.get(url, {'Range': 'bytes={}-{}'.format(0, 100)})

# 2018-07-19 22:32:26.208463
+response.content

# 2018-07-19 22:32:33.686177
+response.headers

# 2018-07-19 22:33:33.134287
+file = open("a.mp3", "wb")

# 2018-07-19 22:33:48.867954
+file.write(response.content)

# 2018-07-19 22:33:59.893474
+file.close()

# 2018-07-19 22:35:11.333887
+file_txt = open("a.txt", "w")

# 2018-07-19 22:35:24.294456
+file_txt.write("Hello World")

# 2018-07-19 22:35:53.491556
+file_txt.close()

# 2018-07-19 22:36:25.868884
+file_txt = open("a.txt", "w")

# 2018-07-19 22:36:28.700746
+file_txt.write("Hello World")

# 2018-07-19 22:36:40.312520
+file.txt.write("World Hello")

# 2018-07-19 22:36:52.363719
+file_txt.write("World Hello")

# 2018-07-19 22:36:56.099619
+file.close()

# 2018-07-19 22:37:20.170930
+file_txt = open("a.txt", "w")

# 2018-07-19 22:37:35.676430
+file_txt.write("Line 1")

# 2018-07-19 22:37:41.019575
+file_txt.close()

# 2018-07-19 22:37:47.304185
+file_txt = open("a.txt", "w")

# 2018-07-19 22:37:49.326346
+file_txt.write("Line 1")

# 2018-07-19 22:37:53.869825
+file_txt.write("Line 2")

# 2018-07-19 22:37:56.323137
+file_txt.write("Line 3")

# 2018-07-19 22:38:02.388305
+file_txt.close()

# 2018-07-19 23:15:35.866752
+import picke

# 2018-07-19 23:15:43.506411
+import pickle

# 2018-07-19 23:15:57.078581
+pickle.APPEND()

# 2018-07-19 23:15:59.000008
+pickle.APPEND

# 2018-07-19 23:32:40.144738
+requests

# 2018-07-19 23:33:28.011744
+response = requests.get(url, {'Range': 'bytes={}-{}'.format(0, 100)})

# 2018-07-19 23:33:45.100828
+response.json()

# 2018-07-19 23:35:40.224983
+response.content

# 2018-07-19 23:35:46.592581
+len(response.content)

# 2018-07-19 23:35:58.827248
+response = requests.get(url, {'Range': 'bytes={}-{}'.format(0, 5)})

# 2018-07-19 23:43:30.469493
+ls

# 2018-07-19 23:43:35.655320
+import requests

# 2018-07-20 01:15:46.823852
+a = b''

# 2018-07-20 01:15:54.964320
+type(a)

# 2018-07-20 01:16:08.511097
+type(response.content)

# 2018-07-20 01:16:20.500145
+import requests

# 2018-07-20 01:16:30.517022
+url = 'http://dammit.com.br/wp-content/uploads/2015/10/13-Nobody.mp3'

# 2018-07-20 01:16:40.825916
+response = requests.get(url, {'Range': 'bytes={}-{}'.format(0, 5)})

# 2018-07-20 01:16:49.398915
+type(response.content)

# 2018-07-20 01:18:09.814640
+class A:
+    c_var= 6
+    self.d = 7

# 2018-07-20 01:18:41.125703
+class A:
+    c_var= 6
+    def __init__(self, a):
+        self.a = a

# 2018-07-20 01:18:54.795301
+o = A(4)

# 2018-07-20 01:18:57.869152
+o.a

# 2018-07-20 01:19:04.103448
+o.c_var

# 2018-07-20 01:19:08.179027
+A.c_var

# 2018-07-20 01:26:38.756824
+a = lambda x: 2 * x

# 2018-07-20 01:26:43.234980
+a(5)

# 2018-07-20 01:27:40.973809
+a = lambda x: print("Hello")

# 2018-07-20 01:27:43.851917
+a(5)

# 2018-07-20 02:00:10.952394
+a = 724590

# 2018-07-20 02:00:13.206965
+a/1024

# 2018-07-20 02:00:16.667107
+a/1024/8

# 2018-07-20 02:00:27.891323
+a/1024/1024

# 2018-07-20 02:02:09.015659
+7.0 * 1024

# 2018-07-20 02:02:25.429258
+7.0 * 1024 * 8

# 2018-07-20 02:02:38.061930
+7.0 * 1024 * 8 * 1024

# 2018-07-20 02:02:48.124770
+7.0 * 1024 * 8 * 1024 /8

# 2018-07-20 02:03:00.551303
+7.0 * 1024 * 1024

# 2018-07-20 02:04:03.767374
+72747590 / 1024

# 2018-07-20 02:04:06.854627
+72747590 / 1024/1024

# 2018-07-20 02:04:20.334154
+72747590 / 1024 / 1024

# 2018-07-20 02:04:33.838654
+7274590 / 1024 / 1024

# 2018-07-20 02:48:36.704366
+import requests

# 2018-07-20 02:49:24.181055
+url = 'http://ws05.longfiles.com/cgi-bin/dl.cgi/3hqofjllrsr3nltxi5zuyectqewxzi4tvqokxwp5k4/Mastering%20Java%20Machine%20Learning.pdf' 

# 2018-07-20 02:49:34.576384
+response = requests.get(url, stream=True)

# 2018-07-20 02:49:38.368831
+response.headers

# 2018-07-20 02:52:13.241541
+header = {'Range': 'bytes={}-{}'.format(0,100)}

# 2018-07-20 02:52:27.019784
+response = requests.get(url, stream=True, headers = header)

# 2018-07-20 02:52:31.945745
+response.headers

# 2018-07-20 02:52:43.615850
+response.status_code

# 2018-07-20 05:25:44.302301
+import os

# 2018-07-20 05:26:02.383964
+os.path('A')

# 2018-07-20 05:26:13.753360
+os.path

# 2018-07-20 05:26:26.350440
+os.path.exists()

# 2018-07-20 05:26:34.654762
+os.path.exists('A')

# 2018-07-20 07:51:54.400185
+f = "012-Meghan%20Trainor%20-%20No.mp3"

# 2018-07-20 07:52:05.401464
+file = open(f, "ab")

# 2018-07-20 07:52:09.363763
+file.tell()

# 2018-07-20 07:52:14.180889
+file.seek()

# 2018-07-20 07:52:28.349180
+file.seek(-1)

# 2018-07-20 07:52:42.836255
+file.seek(2)

# 2018-07-20 07:52:46.749479
+file.seek(-1)

# 2018-07-20 07:52:53.875066
+file.read()

# 2018-07-20 07:53:10.374348
+file.tell()

# 2018-07-20 07:53:47.093481
+file.seek(-1)

# 2018-07-20 08:15:36.484227
+os.path.exists(f)

# 2018-07-20 08:15:47.323965
+f

# 2018-07-20 08:15:56.913632
+os.getcwd()

# 2018-07-20 08:16:36.355564
+os.path.exists(f)

# 2018-07-20 19:23:38.119391
+import anitgravity

# 2018-07-20 19:26:25.244657
+import antigravity

# 2018-07-20 21:46:04.862889
+r = requests.get('http://172.16.16.2:8090/httpclient.html')

# 2018-07-20 21:46:11.336930
+import requests

# 2018-07-20 21:46:12.944674
+r = requests.get('http://172.16.16.2:8090/httpclient.html')

# 2018-07-20 21:46:14.018889
+r

# 2018-07-20 21:46:16.737672
+r.content

# 2018-07-20 21:46:21.589064
+r.json()

# 2018-07-20 21:46:45.528673
+from bs4 import BeautifulSoup

# 2018-07-20 21:47:15.222523
+soup = BeautifulSoup(response.content, 'html.parser')

# 2018-07-20 21:47:20.935188
+soup = BeautifulSoup(r.content, 'html.parser')

# 2018-07-20 21:47:22.692732
+sopu

# 2018-07-20 21:47:25.597319
+soup.prettify

# 2018-07-20 21:49:45.558871
+soup.find_all('input')

# 2018-07-20 21:51:54.522978
+data = {'username': 'stu_rajeev', 'passwd': 'screwed'}

# 2018-07-20 21:52:20.411213
+p = requests.post('http://172.16.16.2:8090/httpclient.html', data)

# 2018-07-20 21:52:34.143929
+url = 'http://172.16.16.2:8090/httpclient.html' 

# 2018-07-20 21:52:51.261310
+resposne = requests.get('http://172.16.16.2:8090/httpclient.html')

# 2018-07-20 21:52:53.931151
+response.status_code

# 2018-07-20 21:53:03.593426
+response = requests.get('http://172.16.16.2:8090/httpclient.html')

# 2018-07-20 21:53:05.297809
+resposne

# 2018-07-20 21:53:08.545052
+response.content

# 2018-07-20 21:53:32.906753
+response.headers

# 2018-07-20 21:53:59.252188
+response_post = requests.post(url, data)

# 2018-07-22 03:52:08.523654
+url = 'https://lynda_files2-a.akamaihd.net/secure/courses/466182/VBR_MP4h264_main_SD/466182_00_01_WX30_welcome.mp4?c3.ri=3773371321898017727&hashval=1532226098_5f5105ec19b3969014034b5f31beacfc'

# 2018-07-22 03:54:29.445832
+import requests

# 2018-07-22 03:56:23.258506
+response = requests.get(url)

# 2018-07-22 03:56:27.819537
+response.headers

# 2018-07-22 03:56:36.001593
+url

# 2018-07-22 03:56:56.093490
+url = 'https://www.lynda.com/portal/patron?org=freelibrary.org'

# 2018-07-22 03:57:01.086002
+response = requests.get(url)

# 2018-07-22 03:57:03.912265
+url

# 2018-07-22 03:57:08.947545
+response.headers

# 2018-07-22 03:57:14.809053
+from bs4 import BeautifulSoup

# 2018-07-22 03:57:18.154411
+soup = BeautifulSoup(r.content, 'html.parser')

# 2018-07-22 03:57:25.786567
+soup = BeautifulSoup(response.content, 'html.parser')

# 2018-07-22 03:57:38.003509
+soup.find_all('input')

# 2018-07-22 03:57:45.454614
+soup.find_all('input').prettify

# 2018-07-22 03:57:49.278302
+soup.find_all('input')

# 2018-07-22 03:59:01.043152
+data={'libraryCardNumber': 2424460, 'libraryCardPin': 1212}

# 2018-07-22 03:59:16.820379
+r = requests.post(url, data)

# 2018-07-22 03:59:19.384397
+r.headers

# 2018-07-22 03:59:34.428338
+r.headers.json()

# 2018-07-22 03:59:40.510526
+import json

# 2018-07-22 03:59:41.722956
+r.headers.json()

# 2018-07-22 03:59:48.607015
+r.json()

# 2018-07-22 03:59:51.239959
+r

# 2018-07-22 03:59:55.402127
+r.text

# 2018-07-22 03:59:59.132807
+r.content

# 2018-07-22 04:00:04.673975
+r.content.json()

# 2018-07-22 04:00:10.063181
+r.headers

# 2018-07-22 04:01:03.290359
+response.headers

# 2018-07-22 04:01:17.659527
+r.headers

# 2018-07-22 04:01:26.896852
+url = 'https://www.lynda.com/portal/patron?org=freelibrary.org'

# 2018-07-22 04:01:36.847656
+response = requests.get(url)

# 2018-07-22 04:01:43.385127
+response.content

# 2018-07-22 04:01:48.467000
+response.headers

# 2018-07-22 04:02:03.232494
+r = requests.post(url, data)

# 2018-07-22 04:02:06.951304
+r.headers

# 2018-07-22 04:02:20.106639
+soup = BeautifulSoup(response.content, 'html.parser')

# 2018-07-22 04:02:23.711155
+soup.find_all('input')

# 2018-07-22 04:03:57.200891
+data={'card-number': 2424460, 'card-pin': 1212}

# 2018-07-22 04:04:04.296667
+r = requests.post(url, data)

# 2018-07-22 04:04:08.089268
+r.headers

# 2018-07-22 04:39:54.565977
+url = 'https://www.safaribooksonline.com/learning-paths/learning-path-ethical/9781788834469/'

# 2018-07-22 04:40:07.434186
+import requests

# 2018-07-22 04:40:08.977742
+from bs4 import BeautifulSoup

# 2018-07-22 04:40:12.259449
+import json

# 2018-07-22 04:40:26.313703
+response = requests.get(url)

# 2018-07-22 04:40:30.341957
+response.headers

# 2018-07-22 04:40:45.704610
+soup = BeautifulSoup(response.content, 'html.parser')

# 2018-07-22 04:40:49.918138
+soup

# 2018-07-22 04:40:57.657366
+soup.prettify

# 2018-07-22 04:41:15.656789
+soup.find_all('a')

# 2018-07-22 04:42:20.470356
+soup.find_all('li')

# 2018-07-22 04:43:28.942120
+soup.find_all('li', class_='toc-level-1')

# 2018-07-22 04:44:19.893918
+soup.find_all('lo')

# 2018-07-22 04:44:28.020183
+soup.find_all('li')

# 2018-07-22 04:56:13.869279
+ls

# 2018-07-22 04:56:35.229105
+url = 'https://www.safaribooksonline.com/learning-paths/learning-path-ethical/9781788834469/9781786466075-video3_1'

# 2018-07-22 04:56:45.720639
+response = requests.get(url)

# 2018-07-22 04:56:50.226698
+import requests

# 2018-07-22 04:56:53.413932
+from bs4 import BeautifulSoup

# 2018-07-22 04:56:57.955589
+import json

# 2018-07-22 04:57:01.826106
+response = requests.get(url)

# 2018-07-22 04:57:07.222502
+response.headers

# 2018-07-22 04:57:19.512214
+soup.find_all('li')

# 2018-07-22 04:57:26.916808
+soup = BeautifulSoup(response.content, 'html.parser')

# 2018-07-22 04:57:33.150449
+soup.find_all('li')

# 2018-07-22 04:57:42.584520
+soup.find_all('li', class_='toc-level-1')

# 2018-07-22 04:58:10.036504
+url = 'https://www.safaribooksonline.com/learning-paths/learning-path-ethical/9781788834469/'

# 2018-07-22 04:58:14.501114
+response = requests.get(url)

# 2018-07-22 04:58:18.025457
+soup = BeautifulSoup(response.content, 'html.parser')

# 2018-07-22 04:58:20.902655
+response = requests.get(url)

# 2018-07-22 04:58:23.585126
+soup = BeautifulSoup(response.content, 'html.parser')

# 2018-07-22 04:58:27.207817
+soup.find_all('li', class_='toc-level-1')

# 2018-07-22 04:58:32.012389
+soup.find_all('li')

# 2018-07-22 04:58:56.944672
+for element in soup.find_all('li'):
+    print(element)

# 2018-07-22 04:59:22.862525
+for element in soup.find_all('td'):
+    print(element)

# 2018-07-22 04:59:38.656370
+for element in soup.find_all('a'):
+    print(element)

# 2018-07-22 05:00:45.552919
+soup = BeautifulSoup(response.text, 'html.parser')

# 2018-07-22 05:00:50.169577
+soup.find_all('li', class_='toc-level-1')

# 2018-07-22 05:23:23.109933
+url = 'https://www.safaribooksonline.com/learning-paths/learning-path-the/9781789617924/9781786466075-video1_1'

# 2018-08-07 10:00:20.748814
+import time

# 2018-08-12 16:30:18.655381
+import whois

# 2018-08-12 16:30:35.638148
+whois.whois('google.com')

# 2018-08-12 16:31:05.480184
+import whois

# 2018-08-12 16:31:09.504455
+whois.whois('google.com')

# 2018-08-12 16:31:33.699505
+whois.whois('google.com').json()

# 2018-08-12 16:31:39.710066
+import json

# 2018-08-12 16:31:48.458578
+whois.whois('google.com').json()

# 2018-08-12 16:32:04.522714
+print(whois.whois('google.com'))

# 2018-08-12 16:32:44.456757
+print(whois.whois('mail.com'))

# 2018-08-12 16:33:22.468368
+print(whois.whois('github.com'))

# 2018-08-12 16:33:40.706533
+print(whois.whois('gitlab.com'))

# 2018-08-12 16:34:14.815933
+print(whois.whois('pornhub.com'))

# 2018-08-12 16:36:01.310870
+print(whois.whois('xvideos.com'))

# 2018-08-12 16:36:17.950074
+print(whois.whois('wikileaks.com'))

# 2018-08-12 16:52:34.299805
+print(whois.whois('cricbuzz.com'))

# 2018-08-12 18:16:52.395235
+import multiprocessing

# 2018-08-12 18:16:57.097686
+multiprocessing.cpu_count

# 2018-08-12 18:16:59.449665
+multiprocessing.cpu_count()

# 2018-08-12 19:55:25.163042
+name = "Balor"

# 2018-08-12 19:55:40.136966
+print(f'{name} is this')

# 2018-08-13 16:20:31.699745
+name = "Balor"

# 2018-08-13 16:20:38.440909
+print(f'{name} is this')

# 2018-08-14 02:23:30.584562
+-7 % -2

# 2018-08-14 02:23:37.198586
+-2 % -7

# 2018-08-14 10:37:59.981669
+l = [1, 2, 3]

# 2018-08-14 10:38:03.478888
+b = []

# 2018-08-14 10:38:07.866529
+b.extend(l)

# 2018-08-14 10:38:08.811597
+b

# 2018-08-14 21:36:48.236363
+def isPrime(num):
+    if num == 1 or num == 0:
+        return False
+        
+    for i in range(2, int(math.sqrt(num))):
+        if num % i == 0:
+            return False
+        
+    return True

# 2018-08-14 21:36:54.743735
+isPrime(97)

# 2018-08-14 21:36:58.716878
+import math

# 2018-08-14 21:37:00.006411
+isPrime(97)

# 2018-08-14 21:37:03.589177
+isPrime(11)

# 2018-08-14 21:37:05.489535
+isPrime(1)

# 2018-08-14 21:37:07.277858
+isPrime(0)

# 2018-08-14 21:37:09.480182
+isPrime(3)

# 2018-08-14 21:37:11.533901
+isPrime(4)

# 2018-08-14 21:38:11.025846
+def isPrime(num):
+    if num == 1 or num == 0:
+        return False
+        
+    for i in range(2, int(math.sqrt(num) + 1)):
+        if num % i == 0:
+            return False
+        
+    return True

# 2018-08-14 21:38:14.314299
+isPrime(4)

# 2018-08-14 21:38:16.482575
+isPrime(3)

# 2018-08-14 21:38:18.334257
+isPrime(11)

# 2018-08-14 21:38:21.597783
+isPrime(13)

# 2018-08-14 21:38:40.380732
+isPrime(0)

# 2018-08-14 21:38:41.817330
+isPrime(1)

# 2018-08-14 21:38:44.659775
+isPrime(2)

# 2018-08-14 21:38:46.094083
+isPrime(3)

# 2018-08-14 21:38:47.880919
+isPrime(4)

# 2018-08-14 21:38:50.117607
+isPrime(5)

# 2018-08-14 21:38:51.805625
+isPrime(6)

# 2018-08-14 21:38:53.625841
+isPrime(7)

# 2018-08-14 21:38:58.405344
+isPrime(8)

# 2018-08-14 21:39:00.053377
+isPrime(9)

# 2018-08-15 11:32:34.628111
+tu = (x for x in range(1, 3))

# 2018-08-15 11:32:35.843677
+tu

# 2018-08-15 11:32:48.156786
+print(tu)

# 2018-08-15 11:32:53.219585
+ty.next

# 2018-08-15 11:32:56.181687
+tu.next

# 2018-08-15 11:32:59.284610
+tu.next()

# 2018-08-15 12:15:00.251936
+import deque

# 2018-08-15 12:17:50.447051
+from collections import deque

# 2018-08-15 12:17:57.643420
+a = deque()

# 2018-08-16 02:26:34.841081
+set1 = set('cde')

# 2018-08-16 02:26:37.685108
+set1

# 2018-08-16 02:26:51.496382
+set2 = set('abc')

# 2018-08-16 02:27:09.673123
+set1.difference(set2)

# 2018-08-16 02:27:50.636880
+set1.symmetric_difference(set2)

# 2018-08-16 02:40:40.617514
+d ={1:1, 2:2}

# 2018-08-16 02:40:45.684854
+d.pop(1)

# 2018-08-16 02:40:46.924849
+d

# 2018-08-17 23:11:01.161053
+dic = {1:1, 2:2}

# 2018-08-17 23:11:07.583340
+d = {1:1, 2:2}

# 2018-08-17 23:11:11.594498
+dic == d

# 2018-08-17 23:11:22.389242
+d[3] = 5

# 2018-08-17 23:11:24.197092
+dic == d

# 2018-08-17 23:21:34.494242
+len(d)

# 2018-08-17 23:21:38.443752
+f = {}

# 2018-08-17 23:21:42.973712
+len(f)

# 2018-08-18 00:00:49.621029
+
+def isPrime(num):
+    if num == 1 or num == 0:
+        return False
+    for i in range(2, int(sqrt(num))):
+        if num % i == 0:
+            return False;
+            
+    return True

# 2018-08-18 00:00:55.755039
+isPrime(5)

# 2018-08-18 00:00:59.532519
+import math

# 2018-08-18 00:01:00.974353
+isPrime(5)

# 2018-08-18 00:01:34.542749
+from math import sqrt

# 2018-08-18 00:01:36.478600
+isPrime(5)

# 2018-08-18 00:01:39.066242
+isPrime(7)

# 2018-08-18 00:14:21.159554
+import math

# 2018-08-18 00:14:26.703564
+math.factorial(5)

# 2018-08-18 03:48:50.752445
+a = [1, 2, 3]

# 2018-08-18 03:49:38.749253
+def c(list):
+    list.appen(4)

# 2018-08-18 03:49:40.977147
+c(a)

# 2018-08-18 03:49:47.697278
+def c(list):
+    list.append(4)

# 2018-08-18 03:49:53.116362
+c(a)

# 2018-08-18 03:49:54.131974
+a

# 2018-08-18 03:55:53.738079
+def c(list):
+    list.append(4)
+    if len(list) == 5:
+        return list

# 2018-08-18 03:55:56.238010
+a

# 2018-08-18 03:56:07.434560
+c(a)

# 2018-08-18 03:56:19.266886
+a

# 2018-08-18 03:56:24.806964
+a = []

# 2018-08-18 03:56:28.134393
+c(a)

# 2018-08-18 03:56:29.731400
+a

# 2018-08-18 03:56:35.516310
+c

# 2018-08-18 03:56:47.058113
+c(a)

# 2018-08-18 03:56:50.274892
+a

# 2018-08-18 03:57:10.434919
+def c(list):
+    list.append(4)
+    c(a)
+    if len(list) == 5:
+        return list

# 2018-08-18 03:57:13.473664
+a = []

# 2018-08-18 03:57:17.286020
+c(a)

# 2018-08-18 03:57:40.352789
+def c(list):
+    list.append(4)
+    if len(list) == 5:
+        return list
+    else:
+        c(a)

# 2018-08-18 03:57:46.643800
+a

# 2018-08-18 03:57:50.045651
+a = []

# 2018-08-18 03:57:54.648011
+c

# 2018-08-18 03:57:57.796680
+c(a)

# 2018-08-18 03:57:58.920505
+a

# 2018-08-18 04:18:52.246403
+a = [1, 2]

# 2018-08-18 04:19:00.661772
+a = [1, 2, 3]

# 2018-08-18 04:19:09.446234
+c(a[1:2])

# 2018-08-18 04:19:11.599080
+a

# 2018-08-18 04:19:35.577743
+a= []

# 2018-08-18 04:19:40.157780
+c(a)

# 2018-08-18 04:19:41.262712
+a

# 2018-08-18 04:20:28.411847
+def c(list):
+    print(list)
+    list.append(4)
+    if len(list) == 5:
+        return list
+    else:
+        c(a)

# 2018-08-18 04:20:39.348261
+def c(list):
+    print(list)
+    list.append(4)
+    if len(list) == 5:
+        return list
+    else:
+        c(list)

# 2018-08-18 04:20:44.342616
+a = []

# 2018-08-18 04:20:51.085678
+c(a)

# 2018-08-18 04:20:59.069719
+a

# 2018-08-18 04:21:10.131877
+a = [1, 2, 3, 4, 5, 6]

# 2018-08-18 04:21:21.510112
+c(a[1:3])

# 2018-08-18 04:21:28.566698
+a

# 2018-08-18 04:21:44.741963
+a = [1, 2]

# 2018-08-18 04:21:58.154886
+c(a[0:2])

# 2018-08-18 04:22:08.582559
+a

# 2018-08-18 04:22:27.892752
+c(a[0:1])

# 2018-08-18 04:22:29.086018
+a

# 2018-08-18 04:23:01.346907
+c(a)

# 2018-08-18 04:23:03.051509
+a

# 2018-08-18 04:23:31.529389
+a = [1, 2, 3, 4, 5, 6]

# 2018-08-18 04:23:42.003585
+b = a[3:5]

# 2018-08-18 04:23:43.157178
+b

# 2018-08-18 04:23:48.966518
+c(b)

# 2018-08-18 04:23:50.223385
+c

# 2018-08-18 04:23:52.028106
+b

# 2018-08-20 00:32:10.018610
+a = 0

# 2018-08-20 00:33:25.682483
+a, pos = "Hello",a+1

# 2018-08-20 00:33:28.456736
+a

# 2018-08-20 00:35:02.915550
+a = 0

# 2018-08-20 00:35:23.420700
+def func(val):
+    val += 1

# 2018-08-20 00:35:29.338276
+func(a)

# 2018-08-20 00:35:29.884535
+a

# 2018-08-20 01:09:37.335788
+def func(val):
+    a += 1

# 2018-08-20 01:09:38.731874
+a

# 2018-08-20 01:09:41.183741
+func(a)

# 2018-08-20 01:09:48.932264
+def func(val):
+    a = 1

# 2018-08-20 01:09:49.499947
+a

# 2018-08-21 10:28:02.104612
+a = [1, 3, 4]

# 2018-08-21 10:28:04.965852
+b = a

# 2018-08-21 10:28:12.425511
+a.clear()

# 2018-08-21 10:28:13.177961
+b

# 2018-08-21 10:28:37.852384
+a = [1, 3, 4]

# 2018-08-21 10:28:43.049365
+b = []

# 2018-08-21 10:29:01.089921
+b.extend(a)

# 2018-08-21 10:29:05.711639
+a.clear()

# 2018-08-21 10:29:06.707124
+b

# 2018-08-21 23:08:20.507328
+4.17e-05

# 2018-08-21 23:08:26.624274
+a = 4.17e-05

# 2018-08-21 23:08:34.401304
+100 * a

# 2018-08-21 23:09:07.131288
+import time

# 2018-08-21 23:09:09.784972
+time.time()

# 2018-08-21 23:09:22.580754
+beg = time.time()

# 2018-08-21 23:09:27.413502
+time.time() - beg

# 2018-08-21 23:09:45.510238
+beg = time.time()

# 2018-08-21 23:09:46.414848
+time.time() - beg

# 2018-08-24 06:32:18.732834
+import requests

# 2018-08-24 06:32:22.403019
+from bs4 import BeautifulSoup

# 2018-08-24 06:32:30.891941
+url = 'https://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-046j-design-and-analysis-of-algorithms-spring-2015/index.htm'

# 2018-08-24 06:32:34.751581
+response = requests.get(url)

# 2018-08-24 06:32:42.881149
+response.json()

# 2018-08-24 06:32:47.750449
+response.content

# 2018-08-24 06:32:59.477139
+soup = BeautifulSoup(response.text, 'html.parser')

# 2018-08-24 06:33:02.086865
+soup

# 2018-08-24 06:33:07.506251
+soup.json()

# 2018-08-24 06:33:10.782091
+soup

# 2018-08-24 06:33:35.335461
+soup.find_all('a')

# 2018-08-24 06:36:05.783615
+for link in soup.find_all('a'):
+    if 'video' in str(link):
+        print(link)

# 2018-08-24 06:36:34.949313
+url

# 2018-08-24 06:37:12.269895
+url2 = url + "/courses/audio-video-courses/>Audio/Video Lectures"

# 2018-08-24 06:37:44.571980
+url2 = url + "/courses/electrical-engineering-and-computer-science/6-046j-design-and-analysis-of-algorithms-spring-2015/lecture-videos"

# 2018-08-24 06:37:56.981856
+re = requests.get(url2)

# 2018-08-24 06:38:16.151249
+s  = BeautifulSoup(re.content, 'html.parser')

# 2018-08-24 06:38:17.877624
+s

# 2018-08-24 06:38:29.391620
+s.find_all('a')

# 2018-08-27 16:02:35.903623
+a = "Hello123"

# 2018-08-27 16:02:41.475880
+a.split();

# 2018-08-27 16:03:00.770397
+a.split("[0-9]");

# 2018-08-27 16:03:08.025243
+l = a.split("[0-9]");

# 2018-08-27 16:03:09.319253
+l

# 2018-08-29 19:43:06.506087
+import os

# 2018-08-29 19:43:16.699874
+os.path.realpath(__file__)

# 2018-08-29 19:43:42.886228
+__file__

# 2018-08-29 21:02:21.563518
+import requests

# 2018-08-29 21:02:42.336376
+from bs4 import BeautifulSoup

# 2018-08-29 21:03:16.825778
+url = 'https://www.safaribooksonline.com/accounts/login/'

# 2018-08-29 21:03:39.771237
+response = requests.get(url)

# 2018-08-29 21:04:18.913157
+response.text

# 2018-08-29 21:06:31.256413
+soup = BeautifulSoup(response.text, 'html.parser')

# 2018-08-29 21:06:43.212435
+soup.prettify

# 2018-08-29 21:40:19.303826
+response = requests.post(url, data={'username': 'safari-3@zippiex.com', 'password':'lkjhg1234'})

# 2018-08-29 21:40:21.331369
+response

# 2018-08-30 18:21:41.687354
+def func(seatNo):
+    quotient = seatNo // 12
+    remainder = seatNo % 12
+    if remainder == 0:
+        oppNo = seatNo - 11
+    else:
+        oppNo = quotient * 12 + (12 - remainder) + 1
+    
+    print('{0} {1}'.format(oppNo, list[remainder % 6]))

# 2018-08-30 18:21:45.355099
+func(45)

# 2018-08-30 18:22:24.239989
+def func(seatNo):
+    quotient = seatNo // 12
+    remainder = seatNo % 12
+    oppNo = 0
+    if remainder == 0:
+        oppNo = seatNo - 11
+    else:
+        oppNo = quotient * 12 + (12 - remainder) + 1
+    
+    print('{0} {1}'.format(oppNo, list[remainder % 6]))

# 2018-08-30 18:22:32.059559
+list = ['WS', 'MS', 'AS', 'AS', 'MS', 'WS']

# 2018-08-30 18:22:37.024762
+def func(seatNo):
+    quotient = seatNo // 12
+    remainder = seatNo % 12
+    oppNo = 0
+    if remainder == 0:
+        oppNo = seatNo - 11
+    else:
+        oppNo = quotient * 12 + (12 - remainder) + 1
+    
+    print('{0} {1}'.format(oppNo, list[remainder % 6]))

# 2018-08-30 18:22:41.406780
+func(45)

# 2018-08-30 18:22:50.102859
+func(40)

# 2018-08-30 18:24:37.798507
+def func(seatNo):
+    quotient = seatNo // 12
+    remainder = seatNo % 12
+    oppNo = 0
+    if remainder == 0:
+        oppNo = seatNo - 11
+    else:
+        oppNo = quotient * 12 + (12 - remainder) + 1
+    
+    print('{0} {1}'.format(oppNo, list[(remainder-1) % 6 ]))

# 2018-08-30 18:24:41.051258
+func(40)

# 2018-08-30 18:24:44.544417
+func(45)

# 2018-08-30 22:07:56.139224
+[a,b] = [1,5]

# 2018-08-30 22:07:56.993881
+a

# 2018-08-30 22:07:58.525227
+b

# 2018-09-05 18:43:45.061830
+a = set(1, 3)

# 2018-09-05 18:43:56.926044
+a = set([1, 3])

# 2018-09-05 18:43:57.713057
+a

# 2018-09-15 13:23:34.164365
+from urllib.request import urlopen

# 2018-09-15 13:23:47.780667
+r = urlopen("https://google.com")

# 2018-09-15 13:23:50.678697
+r

# 2018-09-15 13:23:56.005468
+r.readline()

# 2018-09-15 13:24:52.946191
+r = urlopen("https://debian.org")

# 2018-09-15 13:24:59.105226
+r = urlopen("https://www.debian.org")

# 2018-09-15 13:25:05.322243
+r.readline()

# 2018-09-15 13:25:09.098645
+r.readlines()

# 2018-09-15 13:25:12.685740
+r.readline()

# 2018-09-15 13:25:18.883419
+r.seek(0)

# 2018-09-15 13:25:28.595406
+r.readline()

# 2018-09-15 13:26:13.016429
+r.url

# 2018-09-15 13:26:29.029856
+r.read(5)

# 2018-09-15 13:26:31.034636
+r.read(50)

# 2018-09-15 13:26:38.451850
+r.begin()

# 2018-09-15 13:26:39.868167
+r.read(50)

# 2018-09-15 13:26:49.497323
+r.code

# 2018-09-15 13:27:03.681779
+r.status

# 2018-09-15 13:27:21.062625
+r.seek(0)

# 2018-09-15 13:33:58.594825
+r.getheaders()

# 2018-09-15 13:34:01.956906
+r.getheader()

# 2018-09-15 13:34:05.138804
+r.getheader(date)

# 2018-09-15 13:34:08.038363
+r.getheader('date')

# 2018-09-15 13:34:13.054490
+r.getheader('server')

# 2018-09-15 13:35:30.902371
+from urllib.request import Request

# 2018-09-15 13:35:49.903140
+req = Request("https://www.debian.org")

# 2018-09-15 13:36:10.870537
+req.add_header('Accept-Language', 'sv')

# 2018-09-15 13:36:40.245450
+response = urlopen(req)

# 2018-09-15 13:36:43.260081
+response.code

# 2018-09-15 13:36:59.764317
+response.readlines()

# 2018-09-15 13:37:04.271192
+response.readlines()[:5]

# 2018-09-15 13:37:11.895066
+response = urlopen(req)

# 2018-09-15 13:37:13.810331
+response.readlines()[:5]

# 2018-09-15 13:38:02.072101
+req.header_items

# 2018-09-15 13:38:03.975831
+req.header_items()

# 2018-09-15 15:06:14.893581
+import requests

# 2018-09-15 15:06:42.788112
+data = {}

# 2018-09-15 15:12:21.318005
+data["login"] = "temporary1234567"

# 2018-09-15 15:12:36.275413
+data["passwd"] = "lkjhg1234@?"

# 2018-09-15 15:12:52.491187
+url="https://www.github.com/login"

# 2018-09-15 15:13:05.450994
+r = requests.get(url)

# 2018-09-15 15:13:06.049587
+r

# 2018-09-15 15:13:11.918838
+r.reasib

# 2018-09-15 15:13:14.205519
+r.reason

# 2018-09-15 15:13:33.794681
+data["password"] = "lkjhg1234@?"

# 2018-09-15 15:13:43.175856
+data.pop("passwd")

# 2018-09-15 15:13:44.184450
+data

# 2018-09-15 15:14:10.260384
+r = requests.post(url, data=data) 

# 2018-09-15 15:14:11.052477
+r

# 2018-09-15 15:14:15.857355
+r.reasib

# 2018-09-15 15:14:17.952480
+r.reason

# 2018-09-15 15:14:26.664246
+r

# 2018-09-15 15:14:29.561381
+r.text

# 2018-09-15 15:15:30.973799
+r.headers

# 2018-09-15 15:20:30.723876
+pr_url = "https://github.com/settings/profile"

# 2018-09-15 15:20:41.412997
+r = requests.post(url, data=data) 

# 2018-09-15 15:20:45.287630
+r.is_redirect

# 2018-09-15 15:20:53.620437
+r.url

# 2018-09-15 15:21:07.787462
+re = requests.get(pr_url)

# 2018-09-15 15:21:08.347628
+re

# 2018-09-15 15:21:11.005719
+re.text

# 2018-09-15 15:21:24.772908
+re.headers

# 2018-09-15 15:23:41.067938
+url = "https://www.pcloud.com/"

# 2018-09-15 15:23:49.531384
+d = {}

# 2018-09-15 15:24:26.476713
+d["email"] = "database@fxprix.com"

# 2018-09-15 15:24:56.962048
+d["password"] = "3loves94"

# 2018-09-15 15:24:59.247426
+d

# 2018-09-15 15:25:24.873971
+r = requests.post(url, data = d)

# 2018-09-15 15:25:25.355505
+r

# 2018-09-15 15:25:28.501204
+r.headers

# 2018-09-15 15:25:41.866952
+r.text

# 2018-09-15 15:27:43.968157
+r = requests.post(url, data = d)

# 2018-09-15 15:28:00.696131
+re = requests.get('https://my.pcloud.com/#page=settings&settings=tab-account')

# 2018-09-15 15:28:02.825818
+re.headers

# 2018-09-15 15:28:09.624233
+re.text

# 2018-09-15 15:29:52.549739
+session = requests.Session()

# 2018-09-15 15:30:06.525281
+r = session.pos(url, data=d)

# 2018-09-15 15:30:13.322180
+r = session.post(url, data=d)

# 2018-09-15 15:30:30.018976
+re = session.get('https://my.pcloud.com/#page=settings&settings=tab-account')

# 2018-09-15 15:30:32.773784
+re.headers

# 2018-09-15 15:31:27.202456
+re = session.get('https://my.pcloud.com/#page=filemanager&folder=2158866716&tpl=folderlist')

# 2018-09-15 15:31:28.584535
+re

# 2018-09-15 15:31:33.911319
+re.json()

# 2018-09-15 15:31:38.439940
+re

# 2018-09-15 15:31:42.290491
+re.headers

# 2018-09-15 15:31:47.119832
+re.text

# 2018-09-15 15:32:17.817069
+type(re.text)

# 2018-09-15 15:32:35.745694
+re.text.find("c++")

# 2018-09-15 15:32:41.516097
+re.text.find("tour")

# 2018-09-15 15:32:45.769661
+re.text

# 2018-09-15 16:20:50.452729
+from urllib import requests

# 2018-09-15 16:20:58.905030
+from urllib import urlopen

# 2018-09-15 16:21:47.152126
+import urllib

# 2018-09-15 16:22:14.433412
+import sys

# 2018-09-15 16:22:17.650449
+sys.environ

# 2018-09-15 16:22:20.331967
+sys.enviro

# 2018-09-15 16:22:21.356001
+sys.envi

# 2018-09-15 16:25:02.617193
+from urllib.request import urlopen

# 2018-09-15 16:25:28.227394
+url = "https://safaribooksonline.com/accounts/login"

# 2018-09-15 16:25:46.365709
+r = urlopen(url)

# 2018-09-15 16:25:49.230253
+r.headers

# 2018-09-15 16:25:51.547715
+r.headers()

# 2018-09-15 16:26:02.428644
+r.get_headers()

# 2018-09-15 16:26:04.990335
+r

# 2018-09-15 16:26:08.277715
+r.text

# 2018-09-15 16:26:12.860264
+r.read

# 2018-09-15 16:26:14.845839
+r.read()

# 2018-09-15 16:26:19.027889
+r.get_headers()

# 2018-09-15 16:26:30.479293
+r = urlopen(url)

# 2018-09-15 16:27:19.116523
+r.info()

# 2018-09-15 16:27:21.002488
+r.info

# 2018-09-15 16:27:27.601865
+r.url

# 2018-09-15 16:27:30.114996
+r.code

# 2018-09-15 16:27:32.181446
+r.ol

# 2018-09-15 16:27:33.598218
+r.ok

# 2018-09-15 16:27:38.138172
+r.getheader

# 2018-09-15 16:27:39.731560
+r.getheader()

# 2018-09-15 16:27:55.489531
+r.getheaders

# 2018-09-15 16:27:57.442356
+r.getheaders()

# 2018-09-15 16:28:15.403228
+for line in r.getheaders():
+    print(line)

# 2018-09-15 16:29:18.767157
+with open("safari_headers.txt", 'w') as f:
+    for line in r.getheaders():
+        f.write(line)

# 2018-09-15 16:29:29.922692
+with open("safari_headers.txt", 'w') as f:
+    for line in r.getheaders():
+        f.write(str(line))

# 2018-09-15 16:30:26.991399
+with open("safari_headers.txt", 'w') as f:
+    for line in r.getheaders():
+        f.write(line[0], " : ", line[1])

# 2018-09-15 16:31:04.988389
+with open("safari_headers.txt", 'w') as f:
+    for line in r.getheaders():
+        f.write("{line[0]}: {line[1]}")

# 2018-09-15 16:31:33.538063
+with open("safari_headers.txt", 'w') as f:
+    for line in r.getheaders():
+        print(line[0])

# 2018-09-15 16:31:43.583631
+with open("safari_headers.txt", 'w') as f:
+    for line in r.getheaders():
+        print(line[0], " ", line[1])

# 2018-09-15 16:31:58.070843
+with open("safari_headers.txt", 'w') as f:
+    for line in r.getheaders():
+        print(line[0], ": ", line[1])

# 2018-09-15 16:32:58.059529
+with open("safari_headers.txt", 'w') as f:
+    for line in r.getheaders():
+        print(line[0], ": ", line[1])
+        f.write("{0} : {1}\n".format(line[0], line[1]))

# 2018-09-15 16:34:11.271388
+with open("safari_headers.txt", 'w') as f:
+    for line in r.getheaders():
+        print(line[0], ": ", line[1])
+        f.write("{0} : {1}\n".format(line[0].rjust(50), line[1]))

# 2018-09-15 16:34:51.208501
+with open("safari_headers.txt", 'w') as f:
+    for line in r.getheaders():
+        print(line[0], ": ", line[1])
+        f.write("{0} : {1}\n".format(line[0].rjust(25), line[1]))

# 2018-09-15 16:35:34.374573
+with open("safari_headers.txt", 'w') as f:
+    for line in r.getheaders():
+        print(line[0], ": ", line[1])
+        f.write("{0} : {1}\n".format(line[0].rjust(10), line[1].ljust(15)))
+        
+
+        

# 2018-09-15 16:36:17.939493
+with open("safari_headers.txt", 'w') as f:
+    for line in r.getheaders():
+        print(line[0], ": ", line[1])
+        f.write("{0} : {1}\n".format(line[0].rjust(10), line[1].rjust(15)))

# 2018-09-15 16:36:42.503281
+with open("safari_headers.txt", 'w') as f:
+    for line in r.getheaders():
+        print(line[0], ": ", line[1])
+        f.write("{0} : {1}\n".format(line[0].rjust(10), line[1]))

# 2018-09-15 16:36:54.827022
+with open("safari_headers.txt", 'w') as f:
+    for line in r.getheaders():
+        print(line[0], ": ", line[1])
+        f.write("{0} : {1}\n".format(line[0].rjust(20), line[1]))

# 2018-09-15 16:39:08.752609
+r.headers('User-Agent')

# 2018-09-15 16:39:13.055471
+r.headers

# 2018-09-15 16:39:15.448541
+r.headers()

# 2018-09-15 16:39:28.805796
+r.getcode()

# 2018-09-15 16:39:41.136999
+r.info()

# 2018-09-15 16:39:52.733885
+r.info().__doc__

# 2018-09-15 16:40:10.134860
+r.msg

# 2018-09-15 16:45:39.501747
+r.getheaders()

# 2018-09-15 16:51:48.381755
+r.headers()

# 2018-09-15 16:52:11.398016
+r.getheader('Content-Language')

# 2018-09-15 16:58:34.515955
+import requests

# 2018-09-15 16:58:54.062117
+r = requests.get('https://api.github.com/user', auth=('temporary1234567', 'lkjhg1234@?'))

# 2018-09-15 16:58:55.532496
+r

# 2018-09-15 16:59:13.212742
+r = requests.get('https://api.github.com/temporary1234567', auth=('temporary1234567', 'lkjhg1234@?'))

# 2018-09-15 16:59:14.461633
+r

# 2018-09-15 16:59:18.173560
+r.reason

# 2018-09-15 17:10:58.130406
+payload = {}

# 2018-09-15 17:11:21.954107
+payload["login"] = "temporary1234567"

# 2018-09-15 17:11:38.970191
+payload["password"]  = "lkjhg1234@?"

# 2018-09-15 17:12:33.120358
+import json

# 2018-09-15 17:13:05.004886
+response = requests.post("https://github.com/login", data=json.dumps(payload))

# 2018-09-15 17:13:07.218254
+response

# 2018-09-15 17:13:11.150998
+response.reasone

# 2018-09-15 17:13:12.059016
+response.reason

# 2018-09-15 17:13:22.853355
+response.headers

# 2018-09-15 17:27:06.211183
+payload

# 2018-09-15 19:14:30.224945
+import requests

# 2018-09-15 19:14:41.773181
+url = "http://www.google.com"

# 2018-09-15 19:14:52.638639
+r = requests.get(url)

# 2018-09-15 19:15:02.337293
+r.request

# 2018-09-15 19:15:04.439977
+r.request()

# 2018-09-15 19:15:10.783441
+r.headers

# 2018-09-15 19:15:23.478380
+r.apparent_encoding

# 2018-09-15 19:15:28.076362
+r.cookies

# 2018-09-15 19:18:17.081264
+url = "https://www.google.com"

# 2018-09-15 19:18:21.162779
+r = requests.get(url)

# 2018-09-15 19:18:23.210748
+r.cookies

# 2018-09-15 20:05:27.676762
+r.elapsed

# 2018-09-15 20:05:41.148889
+r.links

# 2018-09-15 20:05:54.496447
+r._content_consumed

# 2018-09-15 20:06:03.384495
+r.apparent_encoding

# 2018-09-15 20:06:16.679740
+r.raw

# 2018-09-15 20:06:26.310984
+r.raw.data

# 2018-09-15 20:06:33.367960
+r.raw.headers

# 2018-09-15 20:08:53.681817
+from urllib.request import urlopen

# 2018-09-15 20:31:28.019265
+import requests

# 2018-09-15 20:31:51.805579
+from bs4 import BeautifulSoup

# 2018-09-15 20:34:04.685160
+data = {
+    'csrfmiddlewaretoken': '',
+    'csrfmiddlewaretoken': 'fQ8VQom8aPdicOH6Q1mia8Yue8gpkg1OI9fTKweF5IuFzLRzsaBS0FvU9g9tV8Tj',
+    'email': 'safari-4@zippiex.com',
+    'password1': 'lkjhg1234',
+    'is_login_form': 'true',
+    'leaveblank': "",
+    'dontchange': 'http://'
+    }

# 2018-09-15 20:36:15.897654
+data

# 2018-09-15 20:36:42.279693
+data['csrfmiddlewaretoken'] = None

# 2018-09-15 20:36:43.777973
+data

# 2018-09-15 20:38:21.646166
+with requests.Session() as session:
+    url = 'http://www.safaribookonline.com/accounts/login'
+    r1 = session.get(url)

# 2018-09-15 20:38:23.402672
+r1

# 2018-09-15 20:38:26.816854
+r1.headers

# 2018-09-15 20:38:32.641524
+r1.request.header

# 2018-09-15 20:38:34.076455
+r1.request.headers

# 2018-09-15 20:39:19.345530
+header = {}

# 2018-09-15 20:39:30.739316
+header['accept'] = "text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8"

# 2018-09-15 20:39:52.466511
+header['accept-encoding'] = "gzip, deflate, br"

# 2018-09-15 20:40:32.945150
+header['content-type'] = "application/x-www-form-urlencoded"

# 2018-09-15 20:41:06.417901
+with requests.Session() as session:
+    url = 'http://www.safaribookonline.com/accounts/login'
+    r1 = session.get(url, headers=header)

# 2018-09-15 20:41:10.774250
+r1.request.headers

# 2018-09-15 20:41:27.890779
+r1.headers

# 2018-09-15 20:41:50.848351
+dat

# 2018-09-15 20:41:52.263267
+data

# 2018-09-15 20:43:04.247977
+with requests.Session() as session:
+    url = 'http://www.safaribookonline.com/accounts/login'
+    r1 = session.get(url, headers=header)
+    token = r1.cookies['csrfsafari']
+    data['csrfmiddlewaretoken'] = token

# 2018-09-15 20:44:34.732841
+with requests.Session() as session:
+    url = 'http://www.safaribookonline.com/accounts/login'
+    r1 = session.get(url, headers=header)
+    token = r1.cookies['csrfsafari']
+    data['csrfmiddlewaretoken'] = token
+    r2 = session.post(url, data=data)
+    r2.request.headers

# 2018-09-15 20:45:00.390013
+with requests.Session() as session:
+    url = 'http://www.safaribookonline.com/accounts/login'
+    r1 = session.get(url, headers=header)
+    token = r1.cookies['csrfsafari']
+    data['csrfmiddlewaretoken'] = token
+    r2 = session.post(url, data=data)
+    print(r2.request.headers)

# 2018-09-15 20:45:34.263408
+with requests.Session() as session:
+    url = 'http://www.safaribookonline.com/accounts/login'
+    r1 = session.get(url, headers=header)
+    token = r1.cookies['csrfsafari']
+    data['csrfmiddlewaretoken'] = token
+    r2 = session.post(url, data=data)
+    print(r2.request.headers)
+    print(r2.headers)

# 2018-09-15 20:47:43.668997
+with requests.Session() as session:
+    url = 'http://www.safaribookonline.com/accounts/login'
+    r1 = session.get(url, headers=header)
+    token = r1.cookies['csrfsafari']
+    data['csrfmiddlewaretoken'] = token
+    r2 = session.post(url, data=data, headers=header)
+    print(r2.request.headers)
+    print(r2.headers)

# 2018-09-15 20:48:25.995258
+with requests.Session() as session:
+    url = 'http://www.safaribookonline.com/accounts/login'
+    r1 = session.get(url, headers=header)
+    token = r1.cookies['csrfsafari']
+    data['csrfmiddlewaretoken'] = token
+    r2 = session.post(url, data=data, headers=header)
+    print(r2.request.headers)
+    print("Response Headers")
+    print(r2.headers)

# 2018-09-15 20:49:05.964341
+header['user-agent'] = "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/69.0.3497.92 Safari/537.36"

# 2018-09-15 20:49:13.291456
+with requests.Session() as session:
+    url = 'http://www.safaribookonline.com/accounts/login'
+    r1 = session.get(url, headers=header)
+    token = r1.cookies['csrfsafari']
+    data['csrfmiddlewaretoken'] = token
+    r2 = session.post(url, data=data, headers=header)
+    print(r2.request.headers)
+    print("Response Headers")
+    print(r2.headers)

# 2018-09-15 21:15:14.383382
+with requests.Session() as session:
+    url = 'http://www.safaribookonline.com/accounts/login'
+    r1 = session.get(url, headers=header)
+    token = r1.cookies['csrfsafari']
+    data['csrfmiddlewaretoken'] = token
+    r2 = session.post(url, data=data, params={'csrfmiddlewaretoken': ""}, headers=header)
+    print(r2.request.headers)
+    print("Response Headers")
+    print(r2.headers)

# 2018-09-15 21:30:50.158670
+header

# 2018-09-15 21:31:22.541208
+data

# 2018-09-15 21:31:48.007929
+data['csrfmiddlewaretoken'] = ('')

# 2018-09-15 21:32:06.488077
+with requests.Session() as session:
+    url = 'http://www.safaribookonline.com/accounts/login'
+    r1 = session.get(url, headers=header)
+    token = r1.cookies['csrfsafari']
+    data['csrfmiddlewaretoken'] = ('', token)
+    r2 = session.post(url, data=data, params={'csrfmiddlewaretoken': ""}, headers=header)
+    print(r2.request.headers)
+    print("Response Headers")
+    print(r2.headers)

# 2018-09-16 14:06:57.334299
+a = 1 | 3

# 2018-09-16 14:06:58.401800
+a

# 2018-09-16 14:07:10.179045
+4 | 7

# 2018-09-16 14:07:13.003664
+4 | 8

# 2018-09-16 14:07:19.484748
+bin(4)

# 2018-09-16 14:07:22.696199
+bin(8)

# 2018-10-04 23:10:34.206403
+import smtplib

# 2018-10-04 23:11:12.337289
+smtplib.SMTP("smtp.mail.com", 587)

# 2018-10-04 23:11:23.414877
+a = smtplib.SMTP("smtp.mail.com", 587)

# 2018-10-04 23:11:27.508278
+a.ehlo()

# 2018-10-04 23:55:26.622728
+s = "Hello"

# 2018-10-04 23:55:57.134674
+s.encode("utf-8")

# 2018-11-20 07:59:20.601452
+from bs4 import BeautifulSoup

# 2018-11-20 07:59:28.534495
+import requests

# 2018-11-20 07:59:40.398392
+url = 'https://www.safaribooksonline.com/library/view/the-hitchhikers-guide/9781491933213/'

# 2018-11-20 07:59:52.020489
+r = requests.get(url)

# 2018-11-20 07:59:56.420016
+r.text

# 2018-11-20 08:00:21.090651
+soup = BeautifulSoup(r.content, 'html.parser')

# 2018-11-20 08:00:23.065668
+soup

# 2018-11-20 08:01:00.991248
+soup.find_all('div', 'metadata')

# 2018-11-20 08:01:49.299695
+data = soup.find_all('div', 'metadata')

# 2018-11-20 08:01:51.187709
+data

# 2018-11-20 08:02:14.753043
+data.get('t-title')

# 2018-11-20 08:02:36.208732
+data

# 2018-11-20 08:02:39.632488
+type(data)

# 2018-11-20 08:02:54.159696
+data.find('t-title')

# 2018-11-20 08:03:18.976430
+data = soup.find('div', 'metadata')

# 2018-11-20 08:03:20.350017
+data

# 2018-11-20 08:03:30.213572
+data.get_attribute_list()

# 2018-11-20 08:03:37.381368
+data.get_attribute_list('t-title')

# 2018-11-20 08:03:44.676918
+data.get_attribute_list('metadata')

# 2018-11-20 08:03:53.620590
+data.get('t-title')

# 2018-11-20 08:03:56.907750
+data

# 2018-11-20 08:04:08.565805
+data.get_attribute_list('class')

# 2018-11-20 08:04:24.234782
+data

# 2018-11-20 08:04:32.914536
+data.attrs

# 2018-11-20 08:05:24.272596
+data.get_text('t-isbn')

# 2018-11-20 08:05:42.794445
+data.get_text('t-title')

# 2018-11-20 08:05:57.502302
+data

# 2018-11-20 08:06:44.380471
+data.get('t-title', 'data-title')

# 2018-11-20 08:06:50.047666
+data.get('t-title')

# 2018-11-20 08:08:42.255413
+data

# 2018-11-20 08:09:03.883255
+data = soup.find('div', attrs={'class': 'metadata'})

# 2018-11-20 08:09:04.962657
+data

# 2018-11-20 08:10:10.532179
+data.find('div', attrs={'class':'t-title'})

# 2018-11-20 08:10:11.636623
+data

# 2018-11-20 08:10:18.210492
+a = data.find('div', attrs={'class':'t-title'})

# 2018-11-20 08:10:18.735041
+a

# 2018-11-20 08:10:38.466567
+a = data.find('h1', attrs={'class':'t-title'})

# 2018-11-20 08:10:39.445515
+a

# 2018-11-20 08:10:44.801376
+data.find('div', attrs={'class':'t-title'})

# 2018-11-20 08:10:50.534137
+data.find('h1', attrs={'class':'t-title'})

# 2018-11-20 08:10:58.515476
+a = data.find('h1', attrs={'class':'t-title'})

# 2018-11-20 08:10:59.451907
+a

# 2018-11-20 08:11:03.508416
+a.getText()

# 2018-11-20 08:11:13.219009
+data

# 2018-11-20 08:11:53.848690
+data.find('div', attrs={'class': 't-authors'})

# 2018-11-20 08:11:58.849845
+data.find('div', attrs={'class': 't-authors'}).getText()

# 2018-11-20 08:12:13.230194
+data.find('div', attrs={'class': 't-authors'}).getText().split(' ')

# 2018-11-20 08:12:26.821883
+data.find('div', attrs={'class': 't-authors'}).getText().split('by')

# 2018-11-20 08:12:30.327346
+data.find('div', attrs={'class': 't-authors'}).getText().split('by ')

# 2018-11-20 08:12:48.084593
+data.find('div', attrs={'class': 't-authors'}).getText().split('by ')[-1].split(',')

# 2018-11-20 08:18:54.239349
+data

# 2018-11-20 08:56:51.517661
+data.find('div', attrs={'class': 'author'})

# 2018-11-20 08:56:56.443789
+data.find('div', attrs={'class': 't-author'})

# 2018-11-20 08:56:58.709559
+data

# 2018-11-20 08:57:23.612330
+data.find('div', attrs={'class': 't-authors'})

# 2018-11-20 08:57:26.990850
+data.find('div', attrs={'class': 'authors'})

# 2018-11-20 08:57:56.133984
+data.find('div', attrs={'class': 't-title'})

# 2018-11-20 08:58:02.317153
+data.find('h1', attrs={'class': 't-title'})

# 2018-11-20 08:58:07.063027
+data.find('h1', attrs={'class': 't-title'}).getText()

# 2018-11-20 08:58:14.814176
+data.find('h1', attrs={'class': 't-title'}).get_text()

# 2018-11-20 09:00:05.145097
+data.find('div', attrs={'class': 't-authors'})

# 2018-11-20 09:00:10.265154
+data.find('div', attrs={'class': 't-authors'}).get_text()

# 2018-11-20 09:12:22.899366
+data

# 2018-11-24 12:41:38.258131
+from collections import deque

# 2018-11-24 12:41:44.160488
+a = [1, 2, 3, 4]

# 2018-11-24 12:42:25.963440
+def f(x = a):
+    if len(x) != 0:
+        return x.pop()
+    else:
+        global a
+        a = [1, 2, 3, 4]
+        return f()

# 2018-11-24 12:42:27.152767
+a

# 2018-11-24 12:42:30.160871
+f()

# 2018-11-24 12:42:46.066690
+def f(x = a):
+    if len(x) != 0:
+        return x.pop()
+    else:
+        global a
+        a = [1, 2, 3, 4]
+        return a.pop()

# 2018-11-24 12:42:51.977129
+a

# 2018-11-24 12:42:56.432852
+f()

# 2018-11-24 12:43:02.192575
+a

# 2018-11-24 12:43:47.962236
+def f(x = a):
+    if len(x) != 0:
+        return x.pop()
+    else:
+        x = [1, 2, 3, 4]
+        return f(x)

# 2018-11-24 12:43:49.793079
+a

# 2018-11-24 12:43:53.585142
+f()

# 2018-11-24 12:43:57.961123
+a

# 2018-11-24 12:46:10.152165
+def f(x = a):
+    i = 0
+    while i < len(x):
+        if (i == len(x)-1):
+            i = 0
+        yield x[i]

# 2018-11-24 12:46:13.609758
+f()

# 2018-11-24 12:46:21.946243
+a = [1, 2, 3, 4]

# 2018-11-24 12:46:23.761820
+f()

# 2018-11-24 12:46:34.066480
+f(a)

# 2018-11-24 12:46:39.077439
+x = f(a)

# 2018-11-24 12:46:39.890622
+c

# 2018-11-24 12:46:41.658294
+x

# 2018-11-24 12:49:24.787351
+f()

# 2018-11-24 12:50:14.763884
+a = [1, 2, 3, 4]

# 2018-11-24 12:56:06.998025
+a

# 2018-11-24 12:56:36.109916
+def f():
+    if len(a) != 0:
+        return a.pop()

# 2018-11-24 12:56:37.997277
+f()

# 2018-11-24 12:56:42.846216
+a

# 2018-11-24 12:56:47.182500
+f()

# 2018-11-24 12:56:52.020599
+a

# 2018-11-24 12:57:00.038466
+a = [1, 2, 3, 4]

# 2018-11-24 12:57:01.302538
+f()

# 2018-11-24 12:57:50.574050
+def f():
+    if len(a) != 0:
+        return a.pop()
+    else:
+        a.extend([1, 2, 3, 4])
+        return a.pop()

# 2018-11-24 12:57:52.478668
+a

# 2018-11-24 12:57:55.574481
+f()

# 2018-11-24 12:58:07.622796
+a

# 2018-11-24 12:58:09.438899
+f()

# 2018-11-24 12:58:10.213496
+a

# 2018-11-24 12:58:11.654480
+f()

# 2018-11-24 12:58:13.118758
+a

# 2018-11-24 12:58:58.455208
+from collections import deque

# 2018-11-24 12:59:20.247649
+a

# 2018-11-24 12:59:27.111334
+a = queue(a)

# 2018-11-24 12:59:27.461594
+a

# 2018-11-24 12:59:32.668207
+a = dequeue(a)

# 2018-11-24 12:59:36.463347
+a = deque(a)

# 2018-11-24 12:59:37.583560
+a

# 2018-11-24 12:59:55.151705
+a.extend(4)

# 2018-11-24 13:00:03.007422
+a.extend([4])

# 2018-11-24 13:00:03.799945
+a

# 2018-11-24 13:01:01.051248
+def f():
+    if len(a) != 0:
+        return a.pop()
+    else:
+        a.extend([1, 2, 3, 4])
+        return f()

# 2018-11-24 13:01:03.038003
+a

# 2018-11-24 13:01:13.312468
+f()

# 2018-11-24 13:01:19.943743
+a

# 2018-11-24 13:01:22.192286
+f()

# 2018-11-24 13:01:23.728090
+a

# 2018-11-24 13:01:25.095831
+f()

# 2018-11-24 13:01:26.056019
+a

# 2018-11-24 13:01:27.656121
+f()

# 2018-11-24 13:01:29.879704
+a

# 2018-11-24 13:08:33.506821
+a = list(range(5))

# 2018-11-24 13:08:34.045629
+a

# 2018-11-25 14:02:52.904738
+a = "TAKI.mkv"

# 2018-11-25 14:04:04.389775
+with open(a, 'wb') as w:
+    for i in range(0, 8):
+        with open(f'{i}.txt', 'rb') as r:
+            w.write(r.read())

# 2018-11-25 14:04:12.729503
+with open(a, 'wb') as w:
+    for i in range(1, 8):
+        with open(f'{i}.txt', 'rb') as r:
+            w.write(r.read())

# 2018-11-29 22:06:48.096075
+import vlc

# 2018-11-29 22:08:58.576396
+p = vlc.activate()

# 2018-11-29 22:09:20.240478
+from vlc import os

# 2018-11-29 22:09:53.704639
+vlc.play("./Daya - Sit Still Look Pretty - MP3 320/08 Sit Still, Look Pretty.mp3")

# 2018-12-02 18:45:51.087125
+from bs4 import BeautifulSoup

# 2018-12-02 18:45:55.198815
+import requests

# 2018-12-19 14:15:03.366310
+self.url

# 2018-12-19 14:15:13.636355
+x = Coursera('https://www.coursera.org/learn/algorithms-on-graphs/home/welcome')

# 2018-12-19 14:15:14.645856
+x

# 2018-12-19 14:15:17.836625
+x.url

# 2018-12-19 14:15:22.556032
+x.email

# 2018-12-19 14:15:58.739032
+response = requests.get(x.url)

# 2018-12-19 14:16:02.564754
+response

# 2018-12-19 14:16:05.844330
+response.text

# 2018-12-19 14:16:11.828772
+response.json()

# 2018-12-19 14:22:57.477395
+response = requests.get(x.url)

# 2018-12-19 14:23:12.581266
+soup = BeautifulSoup(response.content, 'html.parser')

# 2018-12-19 14:23:14.445101
+soup

# 2018-12-19 14:23:22.500812
+soup.find("value")

# 2018-12-19 14:23:43.556598
+soup.find('form')

# 2018-12-19 14:23:57.203659
+soup.find_all('a')

# 2018-12-19 14:24:29.139945
+response.headers

# 2018-12-19 14:24:37.139286
+response.headers['value']

# 2018-12-19 14:31:22.612377
+############### Logging to Github

# 2018-12-19 18:04:17.498390
+ls

# 2018-12-19 18:04:25.402845
+from bs4 import BeautifulSoup

# 2018-12-19 18:04:31.538627
+import requests

# 2018-12-19 18:04:55.737229
+r = requests.get("https://google.com")

# 2018-12-19 18:05:12.075174
+soup = BeautifulSoup(r.content, 'html.parser')

# 2018-12-19 18:06:11.714560
+soup.find_all(attrs={'class': 'div'})

# 2018-12-19 18:06:19.269385
+soup.find_all(attrs={'class': 'head'})

# 2018-12-19 18:06:23.668313
+soup.find_all(attrs={'id': 'head'})

# 2018-12-19 18:06:27.797488
+soup.find_all(attrs={'tag': 'head'})

# 2018-12-19 18:06:40.284277
+soup.find_all(attrs={'form'})

# 2018-12-19 18:06:54.501848
+soup.find_all(class_='h1')

# 2018-12-19 18:06:58.438280
+soup.find_all(class_='div')

# 2018-12-19 18:07:01.124255
+soup

# 2018-12-19 18:07:35.148086
+soup.prettify

# 2018-12-19 18:07:42.652692
+soup.json()
